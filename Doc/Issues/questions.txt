# 1. resx没有生成C#文件?  
https://stackoverflow.com/questions/78194215/why-is-publicresxfilecodegenerator-not-generating-anything

* 经过实验，这个名字是重命名才会触发重新生成，所以重命名是一种解决方式，但要重命名两次。 第一次改错名字生成依次，第二个改成正确的生成一次。
* 修改resx文件的属性也可以出发重新生成
1. Open the .resx File: Navigate to and open the Resource.resx file within your project.
2. change the Access Modifier to "No Code Generation."
3. set the Access Modifier back to "Public."

# 2. 给TextBox添加水印
https://learn.microsoft.com/en-us/dotnet/desktop/wpf/controls/how-to-add-a-watermark-to-a-textbox

# 3. WPF 有多个tab，每个tab中有一个Textbox，当我点击某个tab时，当前tab，和我要切换到的Tab，都会触发 TextBox_LostFocus ，为啥？
这个现象其实是 WPF 的焦点管理机制 导致的，不是你代码写错了。简单说就是：
你当前在 Tab A（TextBox A 里有焦点）。
当你点击 Tab B 的标题时，WPF 需要先切换 Tab。
在这个过程中，TextBox A 失去了焦点 → 触发了 LostFocus。
但是新的 Tab B 的 TextBox 还没真正得到焦点，因为点击的是 TabControl 的 TabItem Header（标签头），焦点会先暂时落在 Header 上。
这时候 Tab B 的 TextBox 也会收到一次“失去焦点”的通知（其实是因为它没获得焦点，但逻辑上 IsVisibleChanged、GotFocus/LostFocus 事件会伴随 Tab 切换）。

误触发的那次， 目标的Textbox找不到父TabItem。
WPF 在切换 Tab 时，目标 TextBox 会被 先加载进视觉树，再触发一堆路由事件（包括 LostFocus/GotFocus 等）。但是注意：

在 TabItem 的 ContentPresenter 还没完全挂载之前，目标 TextBox 不在可视化树里，因此你拿它去找 TabItem 父级，结果就是 null。

事件冒泡/隧道的机制还是会跑一遍，所以你“误收到了 LostFocus”。

```C#
private void TextBox_LostFocus(object sender, RoutedEventArgs e)
{
    var tb = (TextBox)sender;

    // 1. TextBox 还没挂到 TabItem 上，直接忽略
    var parentTab = ItemsControl.ItemsControlFromItemContainer(tb) 
                    ?? tb.TryFindParent<TabItem>();
    if (parentTab == null)
        return; // 这就是误触发的情况

    // 2. 确认焦点到底去了哪里
    var focused = Keyboard.FocusedElement as DependencyObject;
    if (focused != null && tb.IsAncestorOf(focused))
        return; // 焦点还在自己内部，忽略

    // 3. 到这里才算“真正失去焦点”
    Console.WriteLine($"{tb.Name} 在 {parentTab.Header} Tab 真正 LostFocus");
}
//或者
public static class DependencyObjectExtensions
{
    public static T? TryFindParent<T>(this DependencyObject child) where T : DependencyObject
    {
        DependencyObject parent = VisualTreeHelper.GetParent(child);
        while (parent != null && !(parent is T))
        {
            parent = VisualTreeHelper.GetParent(parent);
        }
        return parent as T;
    }
}
```

# 4. 组合上下文时，应该prompt优先，还是数据和文件内容优先?

这是一个很好的问题 👍。其实 **Prompt 和文件内容的摆放顺序**，对 AI 的输出效果是有影响的，主要取决于以下几个因素：

---

### 1. 模型的处理方式

* 大模型是 **自左向右**（或者说前后顺序相关）的语言模型，它更容易对“最近的上下文”产生强影响。
* 因此，**放在后面的内容往往对输出影响更大**。

---

### 2. 你希望 AI 如何利用文件内容

* **如果文件是参考资料**（比如一份文档，代码，论文）：
  最佳做法通常是 →
  **先写 Prompt（说明任务），再附上文件内容**。
  因为模型在读文件时就已经知道该文件的用途，会更有针对性地去“提取”信息。

  📌 示例：

  ```
  你是一个代码审查助手，请帮我检查以下文件是否存在内存泄漏问题。
  文件内容如下：
  [文件...]
  ```

* **如果文件本身就是主要任务**（比如“请总结这份文档”）：
  那么可以 →
  **先放文件内容，再放 Prompt**。
  因为模型会把文件作为输入主体，最后看到指令时更容易知道“我要对刚刚读的东西做总结”。

  📌 示例：

  ```
  [文件...]
  请用中文总结上面文件的主要内容。
  ```

---

### 3. 有研究支持吗？

* OpenAI、Anthropic 等研究团队的实践经验表明：

  * **Instruction-first（指令优先）** 更适合需要“规则驱动”的任务。
  * **Data-first（数据优先）** 更适合需要“直接加工原始数据”的任务。
* 另外，OpenAI Cookbook、LangChain 等社区也有经验总结：

  * **“任务描述靠前，参考资料靠后”** → 常用于问答、代码生成。
  * **“参考资料靠前，任务描述靠后”** → 常用于总结、提炼。

---

✅ **结论**：

* 想让 AI **带着任务去读文件** → Prompt 在前，文件在后。
* 想让 AI **先理解文件，再根据指令加工** → 文件在前，Prompt 在后。

---

要不要我帮你整理一个 **通用的 Prompt 模板**，分别适合「资料型任务」和「数据型任务」两种情况？


好嘞👌，我给你两个通用模板：

---

## 📂 场景 1：资料型任务（Prompt 在前，文件在后）

👉 适合 **问答、分析、查找错误** 这种需要“带着问题去读文件”的任务。

```
你是一个专业的[角色，例如：代码审查助手 / 医学论文分析师]。  
请基于下面提供的文件内容完成任务：  
- 任务目标：[描述任务，例如“检查内存泄漏问题”]  
- 输出要求：[描述输出格式，例如“逐条列出可能存在问题的地方”]  

下面是文件内容：  
[文件内容...]
```

---

## 📂 场景 2：数据型任务（文件在前，Prompt 在后）

👉 适合 **总结、翻译、提炼信息** 这种主要是对文件做加工的任务。

```
以下是文件内容：  
[文件内容...]

请你完成以下任务：  
- 任务目标：[描述任务，例如“总结文件主要观点”]  
- 输出要求：[描述格式，例如“用中文写 5 条要点”]
```

---

## 💡 额外小技巧

1. 如果文件很长，最好在 Prompt 中 **告诉 AI 文件类型和重点**（比如“这是 C++ 源码”、“这是会议记录”），这样模型会更快抓住重点。
2. 如果你有多个文件，可以在 Prompt 里要求 AI **分文件处理**，避免混淆。
3. 如果任务复杂，可以用 **“先理解 → 再回答”** 的链式指令（Chain-of-Thought 提示）。

---

要不要我帮你再做一个 **多文件场景的模板**（比如你有几份代码/文档要一起交给 AI）？
好的👌，那我帮你整理一个 **多文件场景的 Prompt 模板**，你可以直接套用：

---

## 📂 多文件场景通用模板

### 模式 A：分析型任务（Prompt 在前，文件在后）

👉 适合 **比较、交叉分析、问答**。

```
你是一个专业的[角色，例如：系统架构审查专家]。  
请根据下面提供的多个文件完成任务：  
- 任务目标：[描述任务，例如“找出不同文件之间接口设计是否一致”]  
- 输出要求：[描述格式，例如“逐个文件对比后，最后给出整体总结”]  

文件内容如下：  

文件 A（名称/路径/标识）：  
[文件 A 内容]

文件 B（名称/路径/标识）：  
[文件 B 内容]

文件 C（名称/路径/标识）：  
[文件 C 内容]
```

---

### 模式 B：加工型任务（文件在前，Prompt 在后）

👉 适合 **汇总、提炼、翻译**。

```
文件 A（名称/路径/标识）：  
[文件 A 内容]

文件 B（名称/路径/标识）：  
[文件 B 内容]

文件 C（名称/路径/标识）：  
[文件 C 内容]

请你完成以下任务：  
- 任务目标：[例如“综合所有文件，写一份 500 字的总结报告”]  
- 输出要求：[例如“中文输出，分为‘背景-对比-结论’三个部分”]
```

---

## 💡 小技巧

1. **文件标识很重要**：给每个文件一个清晰的名称（如“代码文件 A”，“会议纪要 B”），否则模型容易混淆。
2. **控制输入长度**：如果文件很长，可以在前面提示 AI：“文件较长，请分段逐步处理”。
3. **复杂任务分步引导**：可以要求 AI 先分别总结每个文件，再综合总结。

---

要不要我帮你写一个 **“分步处理多文件”的高级 Prompt 模板**？这样在文件很多或很长时，AI 也不容易跑偏。

好👌，下面给你一个 **分步处理多文件的高级 Prompt 模板**，特别适合文件很多、内容很长的情况，能减少 AI 跑偏：

---

## 📂 分步处理多文件高级模板

```
你是一个专业的[角色，例如：技术审查专家 / 学术论文总结助手]。  
我将提供多个文件，请你严格按照以下步骤完成：  

### 步骤 1：逐文件总结
- 对每个文件单独阅读和总结  
- 输出格式为：  
  文件 [名称/标识]：  
  - 要点 1  
  - 要点 2  
  - 要点 3  

### 步骤 2：跨文件比较 / 分析
- 将所有文件的总结进行比较或关联分析  
- 找出相似点 / 不同点 / 矛盾之处  

### 步骤 3：最终结论
- 综合所有文件，写出整体结论  
- 输出结构化内容（如：背景 → 分析 → 结论）  

---

以下是文件内容：  

文件 A（名称/路径/标识）：  
[文件 A 内容]

文件 B（名称/路径/标识）：  
[文件 B 内容]

文件 C（名称/路径/标识）：  
[文件 C 内容]
```

---

## 💡 优点

* **分步提示** → AI 不会一上来就乱综合，先总结，再分析，再结论。
* **文件分块清晰** → 给每个文件标识，避免内容混淆。
* **结果可控** → 输出格式统一，方便你后续再利用。

---

要不要我帮你再写一个 **适合特别长文件（需要分段输入）的模板**？这样你就可以逐段投喂文件，而不怕超长导致截断。